#!/usr/bin/env python3

import argparse
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns


def get_ancestral_sequence(states, node):
    """
    Reconstructs the most probable sequence
    (higher posterior probability) for a
    phylogeny node based on the states
    outfile generated by iq-tree.
    """

    # Read the sequence states file as dataFrame
    df = pd.read_csv(states,
                     sep="\t",
                     skiprows=8)  # Skip commentary rows
    # Filter the dataframe to retain only the node of interest
    df = df[df.Node == node]
    # Remove terminal regions of the alignment (poor quality)
    df = df.iloc[41:285, :]
    # Discard columns without sequence state data
    df = df.iloc[1:-1, 3:]
    # Set the possible states (20 amino acid letters)
    states = df.columns
    # Create a list with the most probable states
    seq = [states[np.argmax(row[1])].lstrip("p_")  # Get most probable state
           for row in df.iterrows()]  # Iterate over the rows of the dataframe
    # Store the posterior probabilities of most probable states
    post_prob = [np.amax(row[1])  # Store higher posterior probability
                 for row in df.iterrows()]  # Iterate over dataframe rows
    # Put together the sequence into a string
    seq = f'>{node}\n{"".join(seq)}'

    sns.histplot(post_prob, bins=20, stat="probability")
    outfile = f"{node}_post_prob.svg"
    plt.savefig(outfile)
    return seq


def main():
    """Command line argument parser"""

    parser = argparse.ArgumentParser()
    parser.add_argument("states",
                        help="IQ-TREE states outfile")
    parser.add_argument("node",
                        help="Node selected for reconstruction (e.g. Node1)")
    args = parser.parse_args()
    states, node = args.states, args.node
    print(get_ancestral_sequence(states, node))


if __name__ == "__main__":
    main()
